import * as __SNOWPACK_ENV__ from '../_snowpack/env.js';
import.meta.env = __SNOWPACK_ENV__;

import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.37.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import { Buildings, BuildingsAsString, Game } from "./Game.js";
import { nFormatter } from "./util.js";
import Toastify from "../_snowpack/pkg/toastify-js.js";
import "../_snowpack/pkg/toastify-js/src/toastify.css.proxy.js";
import tippy from "../_snowpack/pkg/tippyjs.js";
import "../_snowpack/pkg/tippyjs/dist/tippy.css.proxy.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[14] = list;
	child_ctx[15] = i;
	return child_ctx;
}

// (103:6) {#each Object.keys(Buildings) as key}
function create_each_block(ctx) {
	let li;
	let button;
	let t0_value = /*key*/ ctx[13] + "";
	let t0;
	let t1;
	let t2_value = BuildingsAsString[/*key*/ ctx[13]].count + "";
	let t2;
	let t3;
	let t4_value = nFormatter(BuildingsAsString[/*key*/ ctx[13]].cost) + "";
	let t4;
	let t5;
	let button_style_value;
	let key = /*key*/ ctx[13];
	let t6;
	let mounted;
	let dispose;

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[6](/*key*/ ctx[13]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[7](/*key*/ ctx[13]);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[8](/*key*/ ctx[13]);
	}

	const assign_button = () => /*button_binding*/ ctx[9](button, key);
	const unassign_button = () => /*button_binding*/ ctx[9](null, key);

	return {
		c() {
			li = element("li");
			button = element("button");
			t0 = text(t0_value);
			t1 = text(" (");
			t2 = text(t2_value);
			t3 = text(") - ");
			t4 = text(t4_value);
			t5 = text(" cows");
			t6 = space();

			attr(button, "style", button_style_value = /*game*/ ctx[1].state.cows <= BuildingsAsString[/*key*/ ctx[13]].cost
			? "background-color:#666;"
			: "");

			attr(button, "class", "svelte-2ayfn");
			attr(li, "class", "svelte-2ayfn");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			append(button, t0);
			append(button, t1);
			append(button, t2);
			append(button, t3);
			append(button, t4);
			append(button, t5);
			assign_button();
			append(li, t6);

			if (!mounted) {
				dispose = [
					listen(button, "mouseenter", mouseenter_handler),
					listen(button, "mouseleave", mouseleave_handler),
					listen(button, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*Buildings*/ 1 && t0_value !== (t0_value = /*key*/ ctx[13] + "")) set_data(t0, t0_value);
			if (dirty & /*Buildings*/ 1 && t2_value !== (t2_value = BuildingsAsString[/*key*/ ctx[13]].count + "")) set_data(t2, t2_value);
			if (dirty & /*Buildings*/ 1 && t4_value !== (t4_value = nFormatter(BuildingsAsString[/*key*/ ctx[13]].cost) + "")) set_data(t4, t4_value);

			if (dirty & /*game, Buildings*/ 3 && button_style_value !== (button_style_value = /*game*/ ctx[1].state.cows <= BuildingsAsString[/*key*/ ctx[13]].cost
			? "background-color:#666;"
			: "")) {
				attr(button, "style", button_style_value);
			}

			if (key !== /*key*/ ctx[13]) {
				unassign_button();
				key = /*key*/ ctx[13];
				assign_button();
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			unassign_button();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let div2;
	let p0;
	let t0_value = nFormatter(/*game*/ ctx[1].state.cows) + "";
	let t0;
	let t1;
	let t2_value = (/*game*/ ctx[1].state.cows === 1 ? "" : "s") + "";
	let t2;
	let t3;
	let p1;
	let t4_value = nFormatter(/*game*/ ctx[1].getCps()) + "";
	let t4;
	let t5;
	let t6;
	let div1;
	let t8;
	let div3;
	let ul;
	let t9;
	let mounted;
	let dispose;
	let each_value = Object.keys(/*Buildings*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div4 = element("div");
			div2 = element("div");
			p0 = element("p");
			t0 = text(t0_value);
			t1 = text(" cow");
			t2 = text(t2_value);
			t3 = space();
			p1 = element("p");
			t4 = text(t4_value);
			t5 = text(" cows per second");
			t6 = space();
			div1 = element("div");
			div1.innerHTML = `<div>üêÑ</div>`;
			t8 = space();
			div3 = element("div");
			ul = element("ul");
			t9 = text("Stuff to buy\n      ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div1, "class", "big-cow-click svelte-2ayfn");
			attr(div2, "class", "big-cow svelte-2ayfn");
			attr(ul, "class", "svelte-2ayfn");
			attr(div3, "class", "store svelte-2ayfn");
			attr(div4, "class", "App svelte-2ayfn");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, p0);
			append(p0, t0);
			append(p0, t1);
			append(p0, t2);
			append(div2, t3);
			append(div2, p1);
			append(p1, t4);
			append(p1, t5);
			append(div2, t6);
			append(div2, div1);
			append(div4, t8);
			append(div4, div3);
			append(div3, ul);
			append(ul, t9);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = listen(div1, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*game*/ 2 && t0_value !== (t0_value = nFormatter(/*game*/ ctx[1].state.cows) + "")) set_data(t0, t0_value);
			if (dirty & /*game*/ 2 && t2_value !== (t2_value = (/*game*/ ctx[1].state.cows === 1 ? "" : "s") + "")) set_data(t2, t2_value);
			if (dirty & /*game*/ 2 && t4_value !== (t4_value = nFormatter(/*game*/ ctx[1].getCps()) + "")) set_data(t4, t4_value);

			if (dirty & /*game, BuildingsAsString, Object, Buildings, buttons, showTooltip, updateState, nFormatter*/ 31) {
				each_value = Object.keys(/*Buildings*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const game = new Game(text => {
			Toastify({
				duration: 3000,
				text,
				gravity: "bottom",
				position: "center",
				backgroundColor: "#222",
				close: true
			}).showToast();
		});

	if (localStorage.getItem("save")) game.decodeState(localStorage.getItem("save"));
	window.game = game;

	if (undefined /* [snowpack] import.meta.hot */ ) {
		undefined /* [snowpack] import.meta.hot */ .dispose(() => {
			localStorage.setItem("save", game.encodeState());
		});
	}

	let showTooltip = {};
	let buttons = {};

	onMount(() => {
		Object.keys(buttons).forEach(key => {
			tippy(buttons[key], {
				content: BuildingsAsString[key].tooltip + " " + nFormatter(BuildingsAsString[key].cps) + " cows per second",
				placement: "right",
				arrow: false,
				theme: "black",
				maxWidth: "400em"
			});
		});
	});

	function updateState() {
		$$invalidate(1, game);

		Object.keys(Buildings).forEach(key => {
			//@ts-expect-error
			$$invalidate(0, Buildings);
		});
	}

	let time;

	function tick(timestamp) {
		Object.values(Buildings).forEach(bldg => {
			bldg.tick(game, (timestamp - (isNaN(time) ? 0 : time)) / 1000);
		});

		time = timestamp;
		updateState();
		requestAnimationFrame(tick);
	}

	let longTimeNoSee;

	document.onvisibilitychange = ev => {
		if (document.hidden) {
			longTimeNoSee = Date.now();
			localStorage.setItem("save", game.encodeState());
		} else {
			Object.values(Buildings).forEach(bldg => {
				bldg.tick(game, (Date.now() - longTimeNoSee) / 1000);
			});

			localStorage.setItem("save", game.encodeState());
		}
	};

	requestAnimationFrame(tick);

	document.addEventListener(
		"keydown",
		function (e) {
			if ((window.navigator.platform.match("Mac")
			? e.metaKey
			: e.ctrlKey) && e.keyCode == 83) {
				e.preventDefault();
				localStorage.setItem("save", game.encodeState());
			} // Process the event here (such as click on submit button)
		},
		false
	);

	setInterval(
		() => {
			localStorage.setItem("save", game.encodeState());
		},
		15000
	);

	const click_handler = () => {
		game.click();
		updateState();
	};

	const mouseenter_handler = key => {
		$$invalidate(2, showTooltip[key] = true, showTooltip);
	};

	const mouseleave_handler = key => {
		$$invalidate(2, showTooltip[key] = false, showTooltip);
	};

	const click_handler_1 = key => {
		BuildingsAsString[key].buy(game);
		updateState();
	};

	function button_binding($$value, key) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			buttons[key] = $$value;
			$$invalidate(3, buttons);
			$$invalidate(0, Buildings);
		});
	}

	return [
		Buildings,
		game,
		showTooltip,
		buttons,
		updateState,
		click_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		button_binding
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;